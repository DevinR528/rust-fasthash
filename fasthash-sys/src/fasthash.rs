/* automatically generated by rust-bindgen */

pub type __darwin_size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pair<_T1, _T2> {
    pub first: _T1,
    pub second: _T2,
}
pub type pair_first_type<_T1> = _T1;
pub type pair_second_type<_T2> = _T2;
pub type uint32 = u32;
pub type uint64 = u64;
pub type uint128 =
    pair<::std::os::raw::c_ulonglong, ::std::os::raw::c_ulonglong>;
extern "C" {
    #[link_name = "_Z18CityHash32WithSeedPKcmj"]
    pub fn CityHash32WithSeed(buf: *const ::std::os::raw::c_char, len: usize,
                              seed: uint32) -> uint32;
}
extern "C" {
    #[link_name = "_Z10CityHash64PKcm"]
    pub fn CityHash64(buf: *const ::std::os::raw::c_char, len: usize)
     -> uint64;
}
extern "C" {
    #[link_name = "_Z18CityHash64WithSeedPKcmy"]
    pub fn CityHash64WithSeed(buf: *const ::std::os::raw::c_char, len: usize,
                              seed: uint64) -> uint64;
}
extern "C" {
    #[link_name = "_Z19CityHash64WithSeedsPKcmyy"]
    pub fn CityHash64WithSeeds(buf: *const ::std::os::raw::c_char, len: usize,
                               seed0: uint64, seed1: uint64) -> uint64;
}
extern "C" {
    #[link_name = "_Z11CityHash128PKcm"]
    pub fn CityHash128(s: *const ::std::os::raw::c_char, len: usize)
     -> uint128;
}
extern "C" {
    #[link_name = "_Z19CityHash128WithSeedPKcmNSt3__14pairIyyEE"]
    pub fn CityHash128WithSeed(s: *const ::std::os::raw::c_char, len: usize,
                               seed: uint128) -> uint128;
}
extern "C" {
    #[link_name = "_Z14CityHashCrc128PKcm"]
    pub fn CityHashCrc128(s: *const ::std::os::raw::c_char, len: usize)
     -> uint128;
}
extern "C" {
    #[link_name = "_Z22CityHashCrc128WithSeedPKcmNSt3__14pairIyyEE"]
    pub fn CityHashCrc128WithSeed(s: *const ::std::os::raw::c_char,
                                  len: usize, seed: uint128) -> uint128;
}
extern "C" {
    #[link_name = "_Z14CityHashCrc256PKcmPy"]
    pub fn CityHashCrc256(s: *const ::std::os::raw::c_char, len: usize,
                          result: *mut uint64);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uint128_c_t {
    pub a: u64,
    pub b: u64,
}
#[test]
fn bindgen_test_layout_uint128_c_t() {
    assert_eq!(::std::mem::size_of::<uint128_c_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<uint128_c_t>() , 8usize);
}
impl Clone for uint128_c_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn farmhash(s: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    pub fn farmhash32(s: *const ::std::os::raw::c_char, len: usize) -> u32;
}
extern "C" {
    pub fn farmhash32_with_seed(s: *const ::std::os::raw::c_char, len: usize,
                                seed: u32) -> u32;
}
extern "C" {
    pub fn farmhash64(s: *const ::std::os::raw::c_char, len: usize) -> u64;
}
extern "C" {
    pub fn farmhash64_with_seed(s: *const ::std::os::raw::c_char, len: usize,
                                seed: u64) -> u64;
}
extern "C" {
    pub fn farmhash64_with_seeds(s: *const ::std::os::raw::c_char, len: usize,
                                 seed0: u64, seed1: u64) -> u64;
}
extern "C" {
    pub fn farmhash128(s: *const ::std::os::raw::c_char, len: usize)
     -> uint128_c_t;
}
extern "C" {
    pub fn farmhash128_with_seed(s: *const ::std::os::raw::c_char, len: usize,
                                 seed: uint128_c_t) -> uint128_c_t;
}
extern "C" {
    #[link_name = "_Z17farmhash128_to_6411uint128_c_t"]
    pub fn farmhash128_to_64(x: uint128_c_t) -> u64;
}
extern "C" {
    pub fn farmhash_fingerprint32(s: *const ::std::os::raw::c_char,
                                  len: usize) -> u32;
}
extern "C" {
    pub fn farmhash_fingerprint64(s: *const ::std::os::raw::c_char,
                                  len: usize) -> u64;
}
extern "C" {
    pub fn farmhash_fingerprint128(s: *const ::std::os::raw::c_char,
                                   len: usize) -> uint128_c_t;
}
extern "C" {
    #[link_name = "_Z32farmhash_fingerprint_uint128_c_t11uint128_c_t"]
    pub fn farmhash_fingerprint_uint128_c_t(x: uint128_c_t) -> u64;
}
extern "C" {
    #[link_name = "_Z29farmhash_fingerprint_uint64_ty"]
    pub fn farmhash_fingerprint_uint64_t(x: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z13metrohash64_1PKhyjPh"]
    pub fn metrohash64_1(key: *const u8, len: u64, seed: u32, out: *mut u8);
}
extern "C" {
    #[link_name = "_Z13metrohash64_2PKhyjPh"]
    pub fn metrohash64_2(key: *const u8, len: u64, seed: u32, out: *mut u8);
}
extern "C" {
    #[link_name = "_Z16metrohash64crc_1PKhyjPh"]
    pub fn metrohash64crc_1(key: *const u8, len: u64, seed: u32,
                            out: *mut u8);
}
extern "C" {
    #[link_name = "_Z16metrohash64crc_2PKhyjPh"]
    pub fn metrohash64crc_2(key: *const u8, len: u64, seed: u32,
                            out: *mut u8);
}
extern "C" {
    #[link_name = "_Z14metrohash128_1PKhyjPh"]
    pub fn metrohash128_1(key: *const u8, len: u64, seed: u32, out: *mut u8);
}
extern "C" {
    #[link_name = "_Z14metrohash128_2PKhyjPh"]
    pub fn metrohash128_2(key: *const u8, len: u64, seed: u32, out: *mut u8);
}
extern "C" {
    #[link_name = "_Z17metrohash128crc_1PKhyjPh"]
    pub fn metrohash128crc_1(key: *const u8, len: u64, seed: u32,
                             out: *mut u8);
}
extern "C" {
    #[link_name = "_Z17metrohash128crc_2PKhyjPh"]
    pub fn metrohash128crc_2(key: *const u8, len: u64, seed: u32,
                             out: *mut u8);
}
extern "C" {
    #[link_name = "_ZL18mum_hash_randomizey"]
    pub fn mum_hash_randomize(seed: u64);
}
extern "C" {
    #[link_name = "_ZL13mum_hash_inity"]
    pub fn mum_hash_init(seed: u64) -> u64;
}
extern "C" {
    #[link_name = "_ZL13mum_hash_stepyy"]
    pub fn mum_hash_step(h: u64, key: u64) -> u64;
}
extern "C" {
    #[link_name = "_ZL15mum_hash_finishy"]
    pub fn mum_hash_finish(h: u64) -> u64;
}
extern "C" {
    #[link_name = "_ZL10mum_hash64yy"]
    pub fn mum_hash64(key: u64, seed: u64) -> usize;
}
extern "C" {
    #[link_name = "_ZL8mum_hashPKvmy"]
    pub fn mum_hash(key: *const ::std::os::raw::c_void, len: usize, seed: u64)
     -> u64;
}
extern "C" {
    #[link_name = "_Z11MurmurHash1PKvij"]
    pub fn MurmurHash1(key: *const ::std::os::raw::c_void,
                       len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z18MurmurHash1AlignedPKvij"]
    pub fn MurmurHash1Aligned(key: *const ::std::os::raw::c_void,
                              len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z11MurmurHash2PKvij"]
    pub fn MurmurHash2(key: *const ::std::os::raw::c_void,
                       len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z13MurmurHash64APKviy"]
    pub fn MurmurHash64A(key: *const ::std::os::raw::c_void,
                         len: ::std::os::raw::c_int, seed: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z13MurmurHash64BPKviy"]
    pub fn MurmurHash64B(key: *const ::std::os::raw::c_void,
                         len: ::std::os::raw::c_int, seed: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z12MurmurHash2APKvij"]
    pub fn MurmurHash2A(key: *const ::std::os::raw::c_void,
                        len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z18MurmurHashNeutral2PKvij"]
    pub fn MurmurHashNeutral2(key: *const ::std::os::raw::c_void,
                              len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z18MurmurHashAligned2PKvij"]
    pub fn MurmurHashAligned2(key: *const ::std::os::raw::c_void,
                              len: ::std::os::raw::c_int, seed: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z18MurmurHash3_x86_32PKvijPv"]
    pub fn MurmurHash3_x86_32(key: *const ::std::os::raw::c_void,
                              len: ::std::os::raw::c_int, seed: u32,
                              out: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_Z19MurmurHash3_x86_128PKvijPv"]
    pub fn MurmurHash3_x86_128(key: *const ::std::os::raw::c_void,
                               len: ::std::os::raw::c_int, seed: u32,
                               out: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_Z19MurmurHash3_x64_128PKvijPv"]
    pub fn MurmurHash3_x64_128(key: *const ::std::os::raw::c_void,
                               len: ::std::os::raw::c_int, seed: u32,
                               out: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn t1ha(data: *const ::std::os::raw::c_void, len: usize, seed: u64)
     -> u64;
}
extern "C" {
    pub fn t1ha_64be(data: *const ::std::os::raw::c_void, len: usize,
                     seed: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z9t1ha_64lePKvmy"]
    pub fn t1ha_64le(data: *const ::std::os::raw::c_void, len: usize,
                     seed: u64) -> u64;
}
extern "C" {
    pub fn t1ha_32le(data: *const ::std::os::raw::c_void, len: usize,
                     seed: u64) -> u64;
}
extern "C" {
    pub fn t1ha_32be(data: *const ::std::os::raw::c_void, len: usize,
                     seed: u64) -> u64;
}
extern "C" {
    pub fn t1ha_ia32crc(data: *const ::std::os::raw::c_void, len: usize,
                        seed: u64) -> u64;
}
pub const XXH_OK: _bindgen_ty_9 = _bindgen_ty_9::XXH_OK;
pub const XXH_ERROR: _bindgen_ty_9 = _bindgen_ty_9::XXH_ERROR;
#[repr(u32)]
/*****************************
   Type
*****************************/
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 { XXH_OK = 0, XXH_ERROR = 1, }
pub type XXH_errorcode = _bindgen_ty_9;
extern "C" {
    /*****************************
   Simple Hash Functions
*****************************/
    pub fn XXH32(input: *const ::std::os::raw::c_void, length: usize,
                 seed: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn XXH64(input: *const ::std::os::raw::c_void, length: usize,
                 seed: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_ulonglong;
}
/*****************************
   Advanced Hash Functions
*****************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub ll: [::std::os::raw::c_longlong; 6usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 8usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type XXH32_state_t = _bindgen_ty_10;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub ll: [::std::os::raw::c_longlong; 11usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 88usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 8usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type XXH64_state_t = _bindgen_ty_11;
extern "C" {
    pub fn XXH32_createState() -> *mut XXH32_state_t;
}
extern "C" {
    pub fn XXH32_freeState(statePtr: *mut XXH32_state_t) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_createState() -> *mut XXH64_state_t;
}
extern "C" {
    pub fn XXH64_freeState(statePtr: *mut XXH64_state_t) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_reset(statePtr: *mut XXH32_state_t,
                       seed: ::std::os::raw::c_uint) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_update(statePtr: *mut XXH32_state_t,
                        input: *const ::std::os::raw::c_void, length: usize)
     -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_digest(statePtr: *const XXH32_state_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn XXH64_reset(statePtr: *mut XXH64_state_t,
                       seed: ::std::os::raw::c_ulonglong) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_update(statePtr: *mut XXH64_state_t,
                        input: *const ::std::os::raw::c_void, length: usize)
     -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_digest(statePtr: *const XXH64_state_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "_Z28farmhash_fingerprint_uint12811uint128_c_t"]
    pub fn farmhash_fingerprint_uint128(x: uint128_c_t) -> u64;
}
extern "C" {
    #[link_name = "_Z27farmhash_fingerprint_uint64y"]
    pub fn farmhash_fingerprint_uint64(x: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z7lookup3PKvij"]
    pub fn lookup3(key: *const ::std::os::raw::c_void,
                   length: ::std::os::raw::c_int, initval: u32) -> u32;
}
extern "C" {
    #[link_name = "_Z9mum_hash_PKvmy"]
    pub fn mum_hash_(key: *const ::std::os::raw::c_void, len: usize,
                     seed: u64) -> u64;
}
extern "C" {
    #[link_name = "_Z16SpookyHasherHashPKvmPyS1_"]
    pub fn SpookyHasherHash(message: *const ::std::os::raw::c_void,
                            length: usize, hash1: *mut uint64,
                            hash2: *mut uint64);
}
extern "C" {
    #[link_name = "_Z15SpookyHasherNewv"]
    pub fn SpookyHasherNew() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_Z16SpookyHasherFreePv"]
    pub fn SpookyHasherFree(h: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_Z16SpookyHasherInitPvyy"]
    pub fn SpookyHasherInit(h: *mut ::std::os::raw::c_void, seed1: uint64,
                            seed2: uint64);
}
extern "C" {
    #[link_name = "_Z18SpookyHasherUpdatePvPKvm"]
    pub fn SpookyHasherUpdate(h: *mut ::std::os::raw::c_void,
                              message: *const ::std::os::raw::c_void,
                              length: usize);
}
extern "C" {
    #[link_name = "_Z17SpookyHasherFinalPvPyS0_"]
    pub fn SpookyHasherFinal(h: *mut ::std::os::raw::c_void,
                             hash1: *mut uint64, hash2: *mut uint64);
}
#[test]
fn __bindgen_test_layout_template_1() {
    assert_eq!(::std::mem::size_of::<pair<::std::os::raw::c_ulonglong,
                           ::std::os::raw::c_ulonglong>>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<pair<::std::os::raw::c_ulonglong,
                            ::std::os::raw::c_ulonglong>>()
               , 8usize);
}
