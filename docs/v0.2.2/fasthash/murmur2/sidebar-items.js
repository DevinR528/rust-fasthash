initSidebarItems({"fn":[["hash32","MurmurHash2 32-bit hash functions for a byte array."],["hash32_with_seed","MurmurHash2 32-bit hash function for a byte array. For convenience, a 32-bit seed is also hashed into the result."],["hash64","MurmurHash2 64-bit hash functions for a byte array."],["hash64_with_seed","MurmurHash2 64-bit hash function for a byte array. For convenience, a 64-bit seed is also hashed into the result."]],"struct":[["Murmur2","MurmurHash2 32-bit hash functions"],["Murmur2A","MurmurHash2A 32-bit hash functions"],["Murmur2AHasher","An implementation of `std::hash::Hasher`."],["Murmur2Hasher","An implementation of `std::hash::Hasher`."],["Murmur2Hasher_x64_64","An implementation of `std::hash::Hasher`."],["Murmur2Hasher_x86_64","An implementation of `std::hash::Hasher`."],["Murmur2_x64_64","MurmurHash2 64-bit hash functions for 64-bit processors"],["Murmur2_x86_64","MurmurHash2 64-bit hash functions for 32-bit processors"],["MurmurAligned2","MurmurHash2 32-bit aligned hash functions for the little-endian aligned-read-only implementation"],["MurmurAligned2Hasher","An implementation of `std::hash::Hasher`."],["MurmurNeutral2","MurmurHash2 32-bit neutral hash functions for the (slower) endian-neutral implementation"],["MurmurNeutral2Hasher","An implementation of `std::hash::Hasher`."]]});