var searchIndex = {};
searchIndex["fasthash_sys"] = {"doc":"","items":[[3,"std_namespace_pair","fasthash_sys","",null,null],[12,"first","","",0,null],[12,"second","","",0,null],[3,"uint128_c_t","","",null,null],[12,"a","","",1,null],[12,"b","","",1,null],[3,"_bindgen_ty_10","","",null,null],[12,"ll","","",2,null],[3,"_bindgen_ty_11","","",null,null],[12,"ll","","",3,null],[4,"_bindgen_ty_9","","",null,null],[13,"XXH_OK","","",4,null],[13,"XXH_ERROR","","",4,null],[5,"CityHash32WithSeed","","",null,null],[5,"CityHash64","","",null,null],[5,"CityHash64WithSeed","","",null,null],[5,"CityHash64WithSeeds","","",null,null],[5,"CityHash128","","",null,null],[5,"CityHash128WithSeed","","",null,null],[5,"CityHashCrc128","","",null,null],[5,"CityHashCrc128WithSeed","","",null,null],[5,"CityHashCrc256","","",null,null],[5,"farmhash","","",null,null],[5,"farmhash32","","",null,null],[5,"farmhash32_with_seed","","",null,null],[5,"farmhash64","","",null,null],[5,"farmhash64_with_seed","","",null,null],[5,"farmhash64_with_seeds","","",null,null],[5,"farmhash128","","",null,null],[5,"farmhash128_with_seed","","",null,null],[5,"farmhash128_to_64","","",null,null],[5,"farmhash_fingerprint32","","",null,null],[5,"farmhash_fingerprint64","","",null,null],[5,"farmhash_fingerprint128","","",null,null],[5,"farmhash_fingerprint_uint128_c_t","","",null,null],[5,"farmhash_fingerprint_uint64_t","","",null,null],[5,"metrohash64_1","","",null,null],[5,"metrohash64_2","","",null,null],[5,"metrohash64crc_1","","",null,null],[5,"metrohash64crc_2","","",null,null],[5,"metrohash128_1","","",null,null],[5,"metrohash128_2","","",null,null],[5,"metrohash128crc_1","","",null,null],[5,"metrohash128crc_2","","",null,null],[5,"mum_hash_randomize","","",null,null],[5,"mum_hash_init","","",null,null],[5,"mum_hash_step","","",null,null],[5,"mum_hash_finish","","",null,null],[5,"mum_hash64","","",null,null],[5,"mum_hash","","",null,null],[5,"MurmurHash1","","",null,null],[5,"MurmurHash1Aligned","","",null,null],[5,"MurmurHash2","","",null,null],[5,"MurmurHash64A","","",null,null],[5,"MurmurHash64B","","",null,null],[5,"MurmurHash2A","","",null,null],[5,"MurmurHashNeutral2","","",null,null],[5,"MurmurHashAligned2","","",null,null],[5,"MurmurHash3_x86_32","","",null,null],[5,"MurmurHash3_x86_128","","",null,null],[5,"MurmurHash3_x64_128","","",null,null],[5,"t1ha","","",null,null],[5,"t1ha_64be","","",null,null],[5,"t1ha_64le","","",null,null],[5,"t1ha_32le","","",null,null],[5,"t1ha_32be","","",null,null],[5,"t1ha_ia32crc","","",null,null],[5,"XXH32","","",null,null],[5,"XXH64","","",null,null],[5,"XXH32_createState","","",null,null],[5,"XXH32_freeState","","",null,null],[5,"XXH64_createState","","",null,null],[5,"XXH64_freeState","","",null,null],[5,"XXH32_reset","","",null,null],[5,"XXH32_update","","",null,null],[5,"XXH32_digest","","",null,null],[5,"XXH64_reset","","",null,null],[5,"XXH64_update","","",null,null],[5,"XXH64_digest","","",null,null],[5,"farmhash_fingerprint_uint128","","",null,null],[5,"farmhash_fingerprint_uint64","","",null,null],[5,"lookup3","","",null,null],[5,"mum_hash_","","",null,null],[5,"SpookyHasherHash","","",null,null],[5,"SpookyHasherNew","","",null,null],[5,"SpookyHasherFree","","",null,null],[5,"SpookyHasherInit","","",null,null],[5,"SpookyHasherUpdate","","",null,null],[5,"SpookyHasherFinal","","",null,null],[6,"__darwin_size_t","","",null,null],[6,"std_namespace_pair_first_type","","",null,null],[6,"std_namespace_pair_second_type","","",null,null],[6,"uint32","","",null,null],[6,"uint64","","",null,null],[6,"uint128","","",null,null],[6,"XXH_errorcode","","",null,null],[6,"XXH32_state_t","","",null,null],[6,"XXH64_state_t","","",null,null],[17,"XXH_OK","","",null,null],[17,"XXH_ERROR","","",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null]],"paths":[[3,"std_namespace_pair"],[3,"uint128_c_t"],[3,"_bindgen_ty_10"],[3,"_bindgen_ty_11"],[4,"_bindgen_ty_9"]]};
searchIndex["fasthash"] = {"doc":"A suite of non-cryptographic hash functions for Rust.","items":[[3,"Seed","fasthash","Generate hash seeds",null,null],[3,"RandomState","","`RandomState` provides the default state for `HashMap` or `HashSet` types.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"gen","","Generate a new seed",0,{"inputs":[],"output":{"name":"seed"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",1,{"inputs":[],"output":{"name":"self"}}],[11,"build_hasher","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[0,"city","","CityHash, a family of hash functions for strings.",null,null],[3,"CityHash32","fasthash::city","CityHash 32-bit hash functions",null,null],[3,"CityHasher32","","An implementation of `std::hash::Hasher`.",null,null],[3,"CityHash64","","CityHash 64-bit hash functions",null,null],[3,"CityHasher64","","An implementation of `std::hash::Hasher`.",null,null],[3,"CityHash128","","CityHash 128-bit hash functions",null,null],[3,"CityHasher128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[3,"CityHashCrc128","","CityHash 128-bit hash functions using HW CRC instruction.",null,null],[3,"CityHasherCrc128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[5,"hash32","","CityHash 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","CityHash 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash64","","CityHash 64-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","CityHash 64-bit hash function for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash64_with_seeds","","CityHash 64-bit hash function for a byte array.\nFor convenience, two seeds are also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash128","","CityHash 128-bit hash function for a byte array using HW CRC instruction.\nThat require SSE4.2 instructions to be available.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[5,"hash128_with_seed","","CityHash 128-bit hash function for a byte array using HW CRC instruction.\nFor convenience, a 128-bit seed is also hashed into the result.\nThat require SSE4.2 instructions to be available.",null,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",2,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",3,null],[11,"write","","",3,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",3,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",3,null],[11,"with_capacity_and_seed","","",3,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",2,null],[11,"hash_with_seeds","","Hash functions for a byte array.\nFor convenience, seeds are also hashed into the result.",4,{"inputs":[{"name":"t"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash","","",4,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","Hash functions for a byte array.\nFor convenience, a seed is also hashed into the result.",4,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",5,null],[11,"write","","",5,null],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",5,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",5,null],[11,"with_capacity_and_seed","","",5,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",4,null],[11,"hash","","",6,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",6,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"clone","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",7,null],[11,"write","","",7,null],[11,"finish_ext","","",7,null],[11,"new","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",7,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",7,null],[11,"with_capacity_and_seed","","",7,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",6,null],[11,"hash","","",8,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",8,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",9,null],[11,"write","","",9,null],[11,"finish_ext","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",9,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",9,null],[11,"with_capacity_and_seed","","",9,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",8,null],[0,"farm","fasthash","FarmHash, a family of hash functions.",null,null],[3,"FarmHash32","fasthash::farm","FarmHash 32-bit hash functions",null,null],[3,"FarmHasher32","","An implementation of `std::hash::Hasher`.",null,null],[3,"FarmHash64","","FarmHash 64-bit hash functions",null,null],[3,"FarmHasher64","","An implementation of `std::hash::Hasher`.",null,null],[3,"FarmHash128","","FarmHash 128-bit hash functions",null,null],[3,"FarmHasher128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[5,"hash32","","FarmHash 32-bit hash function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","FarmHash 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash64","","FarmHash 64-bit hash function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","FarmHash 64-bit hash function for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash64_with_seeds","","FarmHash 64-bit hash function for a byte array.\nFor convenience, two seeds are also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash128","","FarmHash 128-bit hash function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[5,"hash128_with_seed","","FarmHash 128-bit hash function for a byte array.\nFor convenience, a 128-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[5,"fingerprint32","","FarmHash 32-bit fingerprint function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"fingerprint64","","FarmHash 64-bit fingerprint function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"fingerprint128","","FarmHash 128-bit fingerprint function for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[11,"hash","","",10,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[11,"hash_with_seed","","",10,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",11,null],[11,"write","","",11,null],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",11,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",11,null],[11,"with_capacity_and_seed","","",11,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",10,null],[11,"hash_with_seeds","","Hash functions for a byte array.\nFor convenience, seeds are also hashed into the result.",12,{"inputs":[{"name":"t"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash","","",12,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",12,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",13,null],[11,"write","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",13,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",13,null],[11,"with_capacity_and_seed","","",13,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",12,null],[11,"hash","","",14,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",14,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"clone","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",15,null],[11,"write","","",15,null],[11,"finish_ext","","",15,null],[11,"new","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",15,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",15,null],[11,"with_capacity_and_seed","","",15,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",14,null],[0,"lookup3","fasthash","Lookup3, non-cryptographic hash.",null,null],[3,"Lookup3","fasthash::lookup3","Lookup3 32-bit hash functions",null,null],[3,"Lookup3Hasher","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash32","","Lookup3 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","Lookup3 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"hash_with_seed","","",16,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",17,null],[11,"write","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",17,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",17,null],[11,"with_capacity_and_seed","","",17,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",16,null],[0,"metro","fasthash","MetroHash, Exceptionally fast and statistically robust hash functions",null,null],[3,"MetroHash64_1","fasthash::metro","MetroHash 64-bit hash functions",null,null],[3,"MetroHasher64_1","","An implementation of `std::hash::Hasher`.",null,null],[3,"MetroHash64_2","","MetroHash 64-bit hash functions",null,null],[3,"MetroHasher64_2","","An implementation of `std::hash::Hasher`.",null,null],[3,"MetroHash128_1","","MetroHash 128-bit hash functions",null,null],[3,"MetroHasher128_1","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[3,"MetroHash128_2","","MetroHash 128-bit hash functions",null,null],[3,"MetroHasher128_2","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[3,"MetroHash64Crc_1","","MetroHash 64-bit hash functions using HW CRC instruction.",null,null],[3,"MetroHasher64Crc_1","","An implementation of `std::hash::Hasher`.",null,null],[3,"MetroHash64Crc_2","","MetroHash 64-bit hash functions using HW CRC instruction.",null,null],[3,"MetroHasher64Crc_2","","An implementation of `std::hash::Hasher`.",null,null],[3,"MetroHash128Crc_1","","MetroHash 128-bit hash functions using HW CRC instruction.",null,null],[3,"MetroHasher128Crc_1","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[3,"MetroHash128Crc_2","","MetroHash 128-bit hash functions using HW CRC instruction.",null,null],[3,"MetroHasher128Crc_2","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[5,"hash64","","MetroHash 64-bit hash function for a byte array using HW CRC instruction.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","MetroHash 64-bit hash function for a byte array using HW CRC instruction.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u64"}}],[5,"hash128","","MetroHash 128-bit hash function for a byte array using HW CRC instruction.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[5,"hash128_with_seed","","MetroHash 128-bit hash function for a byte array. using HW CRC instruction.\nFor convenience, a 128-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",18,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"clone","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",19,null],[11,"write","","",19,null],[11,"new","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",19,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",19,null],[11,"with_capacity_and_seed","","",19,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",18,null],[11,"hash_with_seed","","",20,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"clone","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",21,null],[11,"write","","",21,null],[11,"new","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",21,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",21,null],[11,"with_capacity_and_seed","","",21,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",20,null],[11,"hash_with_seed","","",22,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",23,null],[11,"write","","",23,null],[11,"finish_ext","","",23,null],[11,"new","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",23,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",23,null],[11,"with_capacity_and_seed","","",23,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",22,null],[11,"hash_with_seed","","",24,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",25,null],[11,"write","","",25,null],[11,"finish_ext","","",25,null],[11,"new","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",25,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",25,null],[11,"with_capacity_and_seed","","",25,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",24,null],[11,"hash_with_seed","","",26,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"clone","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",27,null],[11,"write","","",27,null],[11,"new","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",27,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",27,null],[11,"with_capacity_and_seed","","",27,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",26,null],[11,"hash_with_seed","","",28,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"clone","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",29,null],[11,"write","","",29,null],[11,"new","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",29,null],[11,"with_capacity_and_seed","","",29,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",28,null],[11,"hash_with_seed","","",30,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",31,null],[11,"write","","",31,null],[11,"finish_ext","","",31,null],[11,"new","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",31,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",31,null],[11,"with_capacity_and_seed","","",31,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",30,null],[11,"hash_with_seed","","",32,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",33,null],[11,"write","","",33,null],[11,"finish_ext","","",33,null],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",33,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",33,null],[11,"with_capacity_and_seed","","",33,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",32,null],[0,"mum","fasthash","MumHash, Hashing functions and PRNGs based on them",null,null],[3,"MumHash","fasthash::mum","FarmHash 64-bit hash functions",null,null],[3,"MumHasher","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash64","","MumHash 64-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","MumHash 64-bit hash function for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",34,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",35,null],[11,"write","","",35,null],[11,"new","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",35,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",35,null],[11,"with_capacity_and_seed","","",35,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",34,null],[0,"murmur","fasthash","Murmur, a suite of non-cryptographic hash functions that was used for hash-based lookups.",null,null],[3,"Murmur","fasthash::murmur","MurmurHash 32-bit hash functions",null,null],[3,"MurmurHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"MurmurAligned","","MurmurHash 32-bit aligned hash functions",null,null],[3,"MurmurAlignedHasher","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash32","","MurmurHash 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","MurmurHash 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash32_aligned","","MurmurHash 32-bit aligned hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_aligned_with_seed","","MurmurHash 32-bit aligned hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"hash_with_seed","","",36,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",37,null],[11,"write","","",37,null],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",37,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",37,null],[11,"with_capacity_and_seed","","",37,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",36,null],[11,"hash_with_seed","","",38,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",39,null],[11,"default","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",39,null],[11,"write","","",39,null],[11,"new","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",39,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",39,null],[11,"with_capacity_and_seed","","",39,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",38,null],[0,"murmur2","fasthash","Murmur2, a suite of  non-cryptographic hash functions that was used for hash-based lookups.",null,null],[3,"Murmur2","fasthash::murmur2","MurmurHash2 32-bit hash functions",null,null],[3,"Murmur2Hasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"Murmur2A","","MurmurHash2A 32-bit hash functions",null,null],[3,"Murmur2AHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"MurmurNeutral2","","MurmurHash2 32-bit neutral hash functions for the (slower) endian-neutral implementation",null,null],[3,"MurmurNeutral2Hasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"MurmurAligned2","","MurmurHash2 32-bit aligned hash functions for the little-endian aligned-read-only implementation",null,null],[3,"MurmurAligned2Hasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"Murmur2_x64_64","","MurmurHash2 64-bit hash functions for 64-bit processors",null,null],[3,"Murmur2Hasher_x64_64","","An implementation of `std::hash::Hasher`.",null,null],[3,"Murmur2_x86_64","","MurmurHash2 64-bit hash functions for 32-bit processors",null,null],[3,"Murmur2Hasher_x86_64","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash32","","MurmurHash2 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","MurmurHash2 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash64","","MurmurHash2 64-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","MurmurHash2 64-bit hash function for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",40,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",41,null],[11,"write","","",41,null],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",41,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",41,null],[11,"with_capacity_and_seed","","",41,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",40,null],[11,"hash_with_seed","","",42,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",43,null],[11,"write","","",43,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",43,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",43,null],[11,"with_capacity_and_seed","","",43,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",42,null],[11,"hash_with_seed","","",44,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",45,null],[11,"write","","",45,null],[11,"new","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",45,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",45,null],[11,"with_capacity_and_seed","","",45,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",44,null],[11,"hash_with_seed","","",46,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",47,null],[11,"write","","",47,null],[11,"new","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",47,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",47,null],[11,"with_capacity_and_seed","","",47,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",46,null],[11,"hash_with_seed","","",48,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",49,null],[11,"write","","",49,null],[11,"new","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",49,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",49,null],[11,"with_capacity_and_seed","","",49,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",48,null],[11,"hash_with_seed","","",50,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",51,null],[11,"write","","",51,null],[11,"new","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",51,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",51,null],[11,"with_capacity_and_seed","","",51,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",50,null],[0,"murmur3","fasthash","Murmur3, a suite of non-cryptographic hash functions that was used for hash-based lookups.",null,null],[3,"Murmur3_x86_32","fasthash::murmur3","MurmurHash3 32-bit hash functions",null,null],[3,"Murmur3Hasher_x86_32","","An implementation of `std::hash::Hasher`.",null,null],[3,"Murmur3_x86_128","","MurmurHash3 128-bit hash functions for 32-bit processors",null,null],[3,"Murmur3Hasher_x86_128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[3,"Murmur3_x64_128","","MurmurHash3 128-bit hash functions for 64-bit processors",null,null],[3,"Murmur3Hasher_x64_128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[5,"hash32","","MurmurHash3 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","MurmurHash3 32-bit hash functions for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash128","","MurmurHash3 128-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[5,"hash128_with_seed","","MurmurHash3 128-bit hash functions for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",52,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"clone","","",53,null],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",53,null],[11,"write","","",53,null],[11,"new","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",53,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",53,null],[11,"with_capacity_and_seed","","",53,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",52,null],[11,"hash_with_seed","","",54,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",55,null],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",55,null],[11,"write","","",55,null],[11,"finish_ext","","",55,null],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",55,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",55,null],[11,"with_capacity_and_seed","","",55,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",54,null],[11,"hash_with_seed","","",56,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",57,null],[11,"write","","",57,null],[11,"finish_ext","","",57,null],[11,"new","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",57,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",57,null],[11,"with_capacity_and_seed","","",57,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",56,null],[0,"sea","fasthash","SeaHash: A bizarrely fast hash function.",null,null],[3,"SeaHasher64","fasthash::sea","The streaming version of the algorithm.",null,null],[5,"hash64","","Hash some buffer.",null,null],[5,"hash_with_seeds","","Hash some buffer according to a chosen seed.",null,null],[3,"SeaHash","","SeaHash 64-bit hash functions",null,null],[11,"hash","","",58,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",58,null],[11,"build_hasher","","",58,null],[11,"new","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",59,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[0,"spooky","fasthash","SpookyHash: a 128-bit noncryptographic hash function",null,null],[3,"SpookyHash32","fasthash::spooky","SpookyHash 32-bit hash functions",null,null],[3,"SpookyHash64","","SpookyHash 64-bit hash functions",null,null],[3,"SpookyHash128","","SpookyHash 128-bit hash functions",null,null],[3,"SpookyHasher128","","An implementation of `std::hash::Hasher` and `fasthash::HasherExt`.",null,null],[5,"hash32","","SpookyHash 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","SpookyHash 32-bit hash functions for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash64","","SpookyHash 64-bit hash functions for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","SpookyHash 64-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash128","","SpookyHash 128-bit hash functions for a byte array.\nFor convenience, a 128-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"}],"output":{"name":"u128"}}],[5,"hash128_with_seed","","SpookyHash 128-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"hash_with_seed","","",60,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"build_hasher","","",60,null],[11,"hash_with_seed","","",61,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"build_hasher","","",61,null],[11,"hash_with_seed","","",62,{"inputs":[{"name":"t"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",63,null],[11,"finish","","",63,null],[11,"write","","",63,null],[11,"finish_ext","","",63,null],[11,"with_seed","","",63,{"inputs":[{"name":"seed"}],"output":{"name":"spookyhasher128"}}],[11,"build_hasher","","",62,null],[0,"t1ha","fasthash","Fast Positive Hash, aka &quot;Позитивный Хэш&quot;",null,null],[3,"T1ha64Le","fasthash::t1ha","T1ha 64-bit hash functions for 64-bit little-endian platforms.",null,null],[3,"T1ha64LeHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"T1ha64Be","","T1ha 64-bit hash functions for 64-bit big-endian platforms.",null,null],[3,"T1ha64BeHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"T1ha32Le","","T1ha 32-bit hash functions for 32-bit little-endian platforms.",null,null],[3,"T1ha32LeHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"T1ha32Be","","T1ha 32-bit hash functions for 32-bit big-endian platforms.",null,null],[3,"T1ha32BeHasher","","An implementation of `std::hash::Hasher`.",null,null],[3,"T1ha64Crc","","T1ha 64-bit hash functions using HW CRC instruction for 64-bit little-endian platforms.",null,null],[3,"T1ha64CrcHasher","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash32","","T1Hash 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash32_with_seed","","T1Hash 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"hash64","","T1Hash 64-bit hash function for a byte array using HW CRC instruction.\nThat require SSE4.2 instructions to be available.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","T1Hash 64-bit hash function for a byte array using HW CRC instruction.\nThat require SSE4.2 instructions to be available.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",64,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",65,null],[11,"write","","",65,null],[11,"new","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",65,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",65,null],[11,"with_capacity_and_seed","","",65,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",64,null],[11,"hash_with_seed","","",66,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",67,null],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",67,null],[11,"write","","",67,null],[11,"new","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",67,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",67,null],[11,"with_capacity_and_seed","","",67,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",66,null],[11,"hash_with_seed","","",68,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",69,null],[11,"default","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",69,null],[11,"write","","",69,null],[11,"new","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",69,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",69,null],[11,"with_capacity_and_seed","","",69,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",68,null],[11,"hash_with_seed","","",70,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",71,null],[11,"default","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",71,null],[11,"write","","",71,null],[11,"new","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",71,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",71,null],[11,"with_capacity_and_seed","","",71,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",70,null],[11,"hash_with_seed","","",72,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"clone","","",73,null],[11,"default","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",73,null],[11,"write","","",73,null],[11,"new","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"with_seed","","",73,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"as_ref","","",73,null],[11,"with_capacity_and_seed","","",73,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"build_hasher","","",72,null],[0,"xx","fasthash","xxHash - Extremely fast hash algorithm",null,null],[3,"XXHash32","fasthash::xx","xxHash 32-bit hash functions",null,null],[3,"XXHash64","","xxHash 64-bit hash functions",null,null],[3,"XXHasher32","","An implementation of `std::hash::Hasher`.",null,null],[3,"XXHasher64","","An implementation of `std::hash::Hasher`.",null,null],[5,"hash32","","xxHash 32-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash32_with_seed","","xxHash 32-bit hash function for a byte array.\nFor convenience, a 32-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"hash64","","xxHash 64-bit hash functions for a byte array.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash64_with_seed","","xxHash 64-bit hash function for a byte array.\nFor convenience, a 64-bit seed is also hashed into the result.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"hash_with_seed","","",74,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"hash_with_seed","","",75,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",76,null],[11,"finish","","",76,null],[11,"write","","",76,null],[11,"with_seed","","",76,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"build_hasher","","",74,null],[11,"default","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",77,null],[11,"finish","","",77,null],[11,"write","","",77,null],[11,"with_seed","","",77,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"build_hasher","","",75,null],[8,"Fingerprint","fasthash","Generate a good, portable, forever-fixed hash value",null,null],[10,"fingerprint","","This is intended to be a good fingerprinting primitive.",78,null],[8,"FastHash","","Fast non-cryptographic hash functions",null,null],[16,"Value","","The output hash generated value.",79,null],[16,"Seed","","The seed to generate hash value.",79,null],[10,"hash_with_seed","","Hash functions for a byte array.\nFor convenience, a seed is also hashed into the result.",79,{"inputs":[{"name":"t"},{"name":"seed"}],"output":{"name":"value"}}],[11,"hash","","Hash functions for a byte array.",79,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[8,"FastHasher","","Fast non-cryptographic hasher",null,null],[16,"Seed","","The seed to generate hash value.",80,null],[11,"new","","Constructs a new `FastHasher`.",80,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_random_seed","","Constructs a new `FastHasher` with a random seed.",80,{"inputs":[],"output":{"name":"self"}}],[10,"with_seed","","Constructs a new `FastHasher` with seed.",80,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[8,"BufHasher","","Hasher in the buffer mode for short key",null,null],[10,"with_capacity_and_seed","","Constructs a buffered hasher with capacity and seed",81,{"inputs":[{"name":"usize"},{"name":"option"}],"output":{"name":"self"}}],[11,"len","","Returns the number of bytes in the buffer.",81,null],[11,"as_slice","","Extracts a slice containing the entire buffer.",81,null],[8,"StreamHasher","","Hasher in the streaming mode without buffer",null,null],[11,"write_stream","","Writes the stream into this hasher.",82,null],[8,"HasherExt","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish_ext","","Completes a round of hashing, producing the output hash generated.",83,null],[11,"write_u128","","Writes a single `u128` into this hasher.",83,null],[11,"write_i128","","Writes a single `i128` into this hasher.",83,null],[11,"hash","","Hash functions for a byte array.",79,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"new","","Constructs a new `FastHasher`.",80,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_random_seed","","Constructs a new `FastHasher` with a random seed.",80,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Returns the number of bytes in the buffer.",81,null],[11,"as_slice","","Extracts a slice containing the entire buffer.",81,null],[11,"write_stream","","Writes the stream into this hasher.",82,null],[11,"write_u128","","Writes a single `u128` into this hasher.",83,null],[11,"write_i128","","Writes a single `i128` into this hasher.",83,null],[11,"new","fasthash::sea","Create a new `SeaHasher` with default state.",59,{"inputs":[],"output":{"name":"seahasher"}}],[11,"with_seeds","","Construct a new `SeaHasher` given some seed.",59,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"seahasher"}}],[11,"finish","","",59,null],[11,"write","","",59,null],[11,"write_u64","","",59,null],[11,"write_u8","","",59,null],[11,"write_u16","","",59,null],[11,"write_u32","","",59,null],[11,"write_usize","","",59,null],[11,"write_i64","","",59,null],[11,"write_i8","","",59,null],[11,"write_i16","","",59,null],[11,"write_i32","","",59,null],[11,"write_isize","","",59,null],[11,"default","","",59,{"inputs":[],"output":{"name":"seahasher"}}]],"paths":[[3,"Seed"],[3,"RandomState"],[3,"CityHash32"],[3,"CityHasher32"],[3,"CityHash64"],[3,"CityHasher64"],[3,"CityHash128"],[3,"CityHasher128"],[3,"CityHashCrc128"],[3,"CityHasherCrc128"],[3,"FarmHash32"],[3,"FarmHasher32"],[3,"FarmHash64"],[3,"FarmHasher64"],[3,"FarmHash128"],[3,"FarmHasher128"],[3,"Lookup3"],[3,"Lookup3Hasher"],[3,"MetroHash64_1"],[3,"MetroHasher64_1"],[3,"MetroHash64_2"],[3,"MetroHasher64_2"],[3,"MetroHash128_1"],[3,"MetroHasher128_1"],[3,"MetroHash128_2"],[3,"MetroHasher128_2"],[3,"MetroHash64Crc_1"],[3,"MetroHasher64Crc_1"],[3,"MetroHash64Crc_2"],[3,"MetroHasher64Crc_2"],[3,"MetroHash128Crc_1"],[3,"MetroHasher128Crc_1"],[3,"MetroHash128Crc_2"],[3,"MetroHasher128Crc_2"],[3,"MumHash"],[3,"MumHasher"],[3,"Murmur"],[3,"MurmurHasher"],[3,"MurmurAligned"],[3,"MurmurAlignedHasher"],[3,"Murmur2"],[3,"Murmur2Hasher"],[3,"Murmur2A"],[3,"Murmur2AHasher"],[3,"MurmurNeutral2"],[3,"MurmurNeutral2Hasher"],[3,"MurmurAligned2"],[3,"MurmurAligned2Hasher"],[3,"Murmur2_x64_64"],[3,"Murmur2Hasher_x64_64"],[3,"Murmur2_x86_64"],[3,"Murmur2Hasher_x86_64"],[3,"Murmur3_x86_32"],[3,"Murmur3Hasher_x86_32"],[3,"Murmur3_x86_128"],[3,"Murmur3Hasher_x86_128"],[3,"Murmur3_x64_128"],[3,"Murmur3Hasher_x64_128"],[3,"SeaHash"],[3,"SeaHasher64"],[3,"SpookyHash32"],[3,"SpookyHash64"],[3,"SpookyHash128"],[3,"SpookyHasher128"],[3,"T1ha64Le"],[3,"T1ha64LeHasher"],[3,"T1ha64Be"],[3,"T1ha64BeHasher"],[3,"T1ha32Le"],[3,"T1ha32LeHasher"],[3,"T1ha32Be"],[3,"T1ha32BeHasher"],[3,"T1ha64Crc"],[3,"T1ha64CrcHasher"],[3,"XXHash32"],[3,"XXHash64"],[3,"XXHasher32"],[3,"XXHasher64"],[8,"Fingerprint"],[8,"FastHash"],[8,"FastHasher"],[8,"BufHasher"],[8,"StreamHasher"],[8,"HasherExt"]]};
initSearch(searchIndex);
